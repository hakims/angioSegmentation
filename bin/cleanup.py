#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Cleanup utility for Dr-SAM generated files and test outputs.
"""

import os
import sys
from pathlib import Path
import argparse
from utils.cleanup_utils import remove_directory, cleanup_directory_contents

def cleanup_generated_files(root_dir):
    """
    Clean up generated files and folders while preserving original media files.
    Recursively handles nested directory structures.
    
    Args:
        root_dir: Root directory to clean up
    """
    root_dir = Path(root_dir).resolve()
    print(f"\nüßπ Cleaning generated files in: {root_dir}")
    
    # Define generated folders to remove
    generated_folders = {
        "frames", "masks", "skeletons", "skeletons_raw", 
        "debug", "metadata", "cropped", "outputs"
    }
    
    # Define original media file extensions to preserve
    original_extensions = {'.mp4', '.avi', '.mov', '.png', '.jpg', '.jpeg'}
    
    # Define patterns for generated files to remove
    remove_patterns = ['_cropped.mp4']
    
    # Clean up files and directories
    files_removed, dirs_removed = cleanup_directory_contents(
        root_dir,
        preserve_extensions=original_extensions,
        remove_patterns=remove_patterns
    )
    
    print(f"\n‚úÖ Cleanup complete:")
    print(f"  - Removed {files_removed} generated files")
    print(f"  - Removed {dirs_removed} generated directories")
    print(f"  - Preserved original media files")

def cleanup_test_files(project_root=None, test_id=None):
    """
    Clean up test output files and visualizations generated by pytest.
    
    Args:
        project_root: The root directory of the project
                     (defaults to parent directory of this script)
        test_id: Optional specific test ID to clean up
                (if None, cleans up all test outputs)
    """
    if project_root is None:
        project_root = Path(__file__).resolve().parent.parent
    
    test_outputs_dir = project_root / "tests" / "outputs"
    
    if not test_outputs_dir.exists():
        print(f"‚ÑπÔ∏è No test outputs directory found at: {test_outputs_dir}")
        return
    
    if test_id:
        print(f"üßπ Cleaning test outputs for test ID: {test_id}")
        # Clean specific test visualization directory
        vis_test_dir = test_outputs_dir / "visualizations" / test_id
        if vis_test_dir.exists():
            print(f"  üßπ Removing test visualization directory: {vis_test_dir}")
            remove_directory(vis_test_dir, force=True)
        
        # Clean specific test output directory
        test_dir = test_outputs_dir / test_id
        if test_dir.exists():
            print(f"  üßπ Removing test output directory: {test_dir}")
            remove_directory(test_dir, force=True)
        
        if not vis_test_dir.exists() and not test_dir.exists():
            print(f"‚ö†Ô∏è No directories found for test ID: {test_id}")
            print(f"   Available test IDs:")
            # List available test IDs from visualizations directory
            vis_dir = test_outputs_dir / "visualizations"
            if vis_dir.exists():
                for item in vis_dir.iterdir():
                    if item.is_dir():
                        print(f"   - {item.name}")
                        
        # Check if visualizations directory is empty and remove it if empty
        vis_dir = test_outputs_dir / "visualizations"
        if vis_dir.exists() and not any(vis_dir.iterdir()):
            remove_directory(vis_dir)
    else:
        print(f"üßπ Cleaning all test outputs in: {test_outputs_dir}")
        
        # Clean visualizations directory
        visualizations_dir = test_outputs_dir / "visualizations"
        if visualizations_dir.exists():
            print(f"  üßπ Removing test visualizations directory: {visualizations_dir}")
            remove_directory(visualizations_dir, force=True)
        
        # Clean other test output directories
        for item in test_outputs_dir.iterdir():
            if item.is_dir():
                print(f"  üßπ Removing test output directory: {item}")
                remove_directory(item, force=True)
            elif item.is_file():
                print(f"  üóëÔ∏è Deleting test output file: {item}")
                try:
                    item.unlink()
                    print(f"    ‚úÖ Removed file: {item}")
                except Exception as e:
                    print(f"    ‚ùå Error removing file: {e}")
        
        # Remove the main outputs directory if it exists and is empty
        if test_outputs_dir.exists():
            if not any(test_outputs_dir.iterdir()):
                remove_directory(test_outputs_dir)
    
    print("‚úÖ Test cleanup complete")

def list_test_outputs(project_root=None):
    """
    List available test output directories.
    
    Args:
        project_root: The root directory of the project
                     (defaults to parent directory of this script)
    """
    if project_root is None:
        project_root = Path(__file__).resolve().parent.parent
    
    test_outputs_dir = project_root / "tests" / "outputs"
    
    if not test_outputs_dir.exists():
        print(f"‚ÑπÔ∏è No test outputs directory found at: {test_outputs_dir}")
        return
    
    visualizations_dir = test_outputs_dir / "visualizations"
    if visualizations_dir.exists() and any(visualizations_dir.iterdir()):
        print("\nüìÇ Available test visualization directories:")
        for item in visualizations_dir.iterdir():
            if item.is_dir():
                print(f"  - {item.name}")
    else:
        print("‚ÑπÔ∏è No test visualization directories found")
    
    other_dirs = [item for item in test_outputs_dir.iterdir() 
                 if item.is_dir() and item.name != "visualizations"]
    
    if other_dirs:
        print("\nüìÇ Other test output directories:")
        for item in other_dirs:
            print(f"  - {item.name}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Cleanup utility for Dr-SAM generated files and test outputs")
    parser.add_argument("path", nargs="?", help="Path to clean up (for regular cleanup)")
    parser.add_argument("--tests", action="store_true", help="Clean up test outputs")
    parser.add_argument("--test-id", help="Specific test ID to clean up")
    parser.add_argument("--list", action="store_true", help="List available test outputs")
    
    args = parser.parse_args()
    
    if args.list:
        list_test_outputs()
    elif args.tests:
        cleanup_test_files(test_id=args.test_id)
    elif args.path:
        # Clean up the path - remove any quotes and normalize
        root_dir = str(args.path).strip('"').strip("'")
        root_dir = Path(root_dir).resolve()
        
        if not root_dir.exists() or not root_dir.is_dir():
            print(f"‚ùå Invalid directory: {root_dir}")
            print("Please check that the path exists and is a directory")
            sys.exit(1)
        cleanup_generated_files(root_dir)
    else:
        print("Usage: python cleanup.py <path_to_root_dir> OR python cleanup.py --tests [--test-id TEST_ID] OR python cleanup.py --list")
        sys.exit(1)
