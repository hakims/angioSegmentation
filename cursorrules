These are the basic coding principles you should follow when working on this project:

Always explain to the user your implementation plan and ask for their approval before writing code. 

Always make an effort to scan through the code directory and ensure files/folders/code functionality you are creating has not already been done. If a functionality already exists in a utils file make efforts to use those first. If you can anticipate that similar code blocks or loops could be reused in the future, make an effort to update the utils with helper functions before writing new code. Always ask the user before writing new code.

Ensure the generated code is well-organized and modular, with clear separation of concerns.

Use descriptive variable, function, and class names that reflect their purpose.

Include concise, meaningful inline comments and documentation to explain non-obvious logic.

Adhere to established coding standards and style guides relevant to the language or framework.

Write code that is maintainable, with proper error handling and clear boundaries for functionality.

Avoid overly complex or deeply nested structures by favoring simplicity and clarity. 

Optimize for performance and security by following best practices and using efficient algorithms.

Incorporate unit tests or example test cases to demonstrate and verify functionality.

Write code that is self-contained with minimal dependencies, facilitating easy integration into larger projects.

Split code up into separate files with meaningful names, avoid having large files with more than 300 lines of code.